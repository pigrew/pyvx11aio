# Generated by rpcgen.py from vxi11.x on Sun Nov 10 23:13:26 2019
import sys,os
sys.path.append(os.path.dirname(__file__))
import vxi11_const as const
import vxi11_type as types
import xdrlib
from xdrlib import Error as XDRError

class nullclass(object):
    pass

class VXI11Packer(xdrlib.Packer):
    def __init__(self, check_enum=True, check_array=True):
        xdrlib.Packer.__init__(self)
        self.check_enum = check_enum
        self.check_array = check_array

    pack_int = xdrlib.Packer.pack_int
    pack_uint = xdrlib.Packer.pack_uint
    pack_unsigned = xdrlib.Packer.pack_uint
    pack_hyper = xdrlib.Packer.pack_hyper
    pack_uhyper = xdrlib.Packer.pack_uhyper
    pack_float = xdrlib.Packer.pack_float
    pack_double = xdrlib.Packer.pack_double
    pack_quadruple = xdrlib.Packer.pack_double
    pack_bool = xdrlib.Packer.pack_bool
    pack_opaque = xdrlib.Packer.pack_opaque
    pack_string = xdrlib.Packer.pack_string
    pack_Device_Link = pack_int

    def pack_Device_AddrFamily(self, data):
        if hasattr(self, 'filter_Device_AddrFamily'):
            data = getattr(self, 'filter_Device_AddrFamily')(data)
        if self.check_enum and data not in [const.DEVICE_TCP, const.DEVICE_UDP]:
            raise XDRError('value=%s not in enum Device_AddrFamily' % data)
        self.pack_int(data)

    pack_Device_Flags = pack_int

    pack_Device_ErrorCode = pack_int

    def pack_Device_Error(self, data):
        if hasattr(self, 'filter_Device_Error'):
            data = getattr(self, 'filter_Device_Error')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_Device_ErrorCode(data.error)

    def pack_Create_LinkParms(self, data):
        if hasattr(self, 'filter_Create_LinkParms'):
            data = getattr(self, 'filter_Create_LinkParms')(data)
        if data.clientId is None:
            raise TypeError('data.clientId == None')
        self.pack_int(data.clientId)
        if data.lockDevice is None:
            raise TypeError('data.lockDevice == None')
        self.pack_bool(data.lockDevice)
        if data.lock_timeout is None:
            raise TypeError('data.lock_timeout == None')
        self.pack_uint(data.lock_timeout)
        if data.device is None:
            raise TypeError('data.device == None')
        self.pack_string(data.device)

    def pack_Create_LinkResp(self, data):
        if hasattr(self, 'filter_Create_LinkResp'):
            data = getattr(self, 'filter_Create_LinkResp')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_Device_ErrorCode(data.error)
        if data.lid is None:
            raise TypeError('data.lid == None')
        self.pack_Device_Link(data.lid)
        if data.abortPort is None:
            raise TypeError('data.abortPort == None')
        self.pack_uint(data.abortPort)
        if data.maxRecvSize is None:
            raise TypeError('data.maxRecvSize == None')
        self.pack_uint(data.maxRecvSize)

    def pack_Device_WriteParms(self, data):
        if hasattr(self, 'filter_Device_WriteParms'):
            data = getattr(self, 'filter_Device_WriteParms')(data)
        if data.lid is None:
            raise TypeError('data.lid == None')
        self.pack_Device_Link(data.lid)
        if data.io_timeout is None:
            raise TypeError('data.io_timeout == None')
        self.pack_uint(data.io_timeout)
        if data.lock_timeout is None:
            raise TypeError('data.lock_timeout == None')
        self.pack_uint(data.lock_timeout)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_Device_Flags(data.flags)
        if data.data is None:
            raise TypeError('data.data == None')
        self.pack_opaque(data.data)

    def pack_Device_WriteResp(self, data):
        if hasattr(self, 'filter_Device_WriteResp'):
            data = getattr(self, 'filter_Device_WriteResp')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_Device_ErrorCode(data.error)
        if data.size is None:
            raise TypeError('data.size == None')
        self.pack_uint(data.size)

    def pack_Device_ReadParms(self, data):
        if hasattr(self, 'filter_Device_ReadParms'):
            data = getattr(self, 'filter_Device_ReadParms')(data)
        if data.lid is None:
            raise TypeError('data.lid == None')
        self.pack_Device_Link(data.lid)
        if data.requestSize is None:
            raise TypeError('data.requestSize == None')
        self.pack_uint(data.requestSize)
        if data.io_timeout is None:
            raise TypeError('data.io_timeout == None')
        self.pack_uint(data.io_timeout)
        if data.lock_timeout is None:
            raise TypeError('data.lock_timeout == None')
        self.pack_uint(data.lock_timeout)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_Device_Flags(data.flags)
        if data.termChar is None:
            raise TypeError('data.termChar == None')
        self.pack_uint(data.termChar)

    def pack_Device_ReadResp(self, data):
        if hasattr(self, 'filter_Device_ReadResp'):
            data = getattr(self, 'filter_Device_ReadResp')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_Device_ErrorCode(data.error)
        if data.reason is None:
            raise TypeError('data.reason == None')
        self.pack_int(data.reason)
        if data.data is None:
            raise TypeError('data.data == None')
        self.pack_opaque(data.data)

    def pack_Device_ReadStbResp(self, data):
        if hasattr(self, 'filter_Device_ReadStbResp'):
            data = getattr(self, 'filter_Device_ReadStbResp')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_Device_ErrorCode(data.error)
        if data.stb is None:
            raise TypeError('data.stb == None')
        self.pack_uint(data.stb)

    def pack_Device_GenericParms(self, data):
        if hasattr(self, 'filter_Device_GenericParms'):
            data = getattr(self, 'filter_Device_GenericParms')(data)
        if data.lid is None:
            raise TypeError('data.lid == None')
        self.pack_Device_Link(data.lid)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_Device_Flags(data.flags)
        if data.lock_timeout is None:
            raise TypeError('data.lock_timeout == None')
        self.pack_uint(data.lock_timeout)
        if data.io_timeout is None:
            raise TypeError('data.io_timeout == None')
        self.pack_uint(data.io_timeout)

    def pack_Device_RemoteFunc(self, data):
        if hasattr(self, 'filter_Device_RemoteFunc'):
            data = getattr(self, 'filter_Device_RemoteFunc')(data)
        if data.hostAddr is None:
            raise TypeError('data.hostAddr == None')
        self.pack_uint(data.hostAddr)
        if data.hostPort is None:
            raise TypeError('data.hostPort == None')
        self.pack_uint(data.hostPort)
        if data.progNum is None:
            raise TypeError('data.progNum == None')
        self.pack_uint(data.progNum)
        if data.progVers is None:
            raise TypeError('data.progVers == None')
        self.pack_uint(data.progVers)
        if data.progFamily is None:
            raise TypeError('data.progFamily == None')
        self.pack_Device_AddrFamily(data.progFamily)

    def pack_Device_EnableSrqParms(self, data):
        if hasattr(self, 'filter_Device_EnableSrqParms'):
            data = getattr(self, 'filter_Device_EnableSrqParms')(data)
        if data.lid is None:
            raise TypeError('data.lid == None')
        self.pack_Device_Link(data.lid)
        if data.enable is None:
            raise TypeError('data.enable == None')
        self.pack_bool(data.enable)
        if data.handle is None:
            raise TypeError('data.handle == None')
        if len(data.handle) > 40 and self.check_array:
            raise XDRError('array length too long for data.handle')
        self.pack_opaque(data.handle)

    def pack_Device_LockParms(self, data):
        if hasattr(self, 'filter_Device_LockParms'):
            data = getattr(self, 'filter_Device_LockParms')(data)
        if data.lid is None:
            raise TypeError('data.lid == None')
        self.pack_Device_Link(data.lid)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_Device_Flags(data.flags)
        if data.lock_timeout is None:
            raise TypeError('data.lock_timeout == None')
        self.pack_uint(data.lock_timeout)

    def pack_Device_DocmdParms(self, data):
        if hasattr(self, 'filter_Device_DocmdParms'):
            data = getattr(self, 'filter_Device_DocmdParms')(data)
        if data.lid is None:
            raise TypeError('data.lid == None')
        self.pack_Device_Link(data.lid)
        if data.flags is None:
            raise TypeError('data.flags == None')
        self.pack_Device_Flags(data.flags)
        if data.io_timeout is None:
            raise TypeError('data.io_timeout == None')
        self.pack_uint(data.io_timeout)
        if data.lock_timeout is None:
            raise TypeError('data.lock_timeout == None')
        self.pack_uint(data.lock_timeout)
        if data.cmd is None:
            raise TypeError('data.cmd == None')
        self.pack_int(data.cmd)
        if data.network_order is None:
            raise TypeError('data.network_order == None')
        self.pack_bool(data.network_order)
        if data.datasize is None:
            raise TypeError('data.datasize == None')
        self.pack_int(data.datasize)
        if data.data_in is None:
            raise TypeError('data.data_in == None')
        self.pack_opaque(data.data_in)

    def pack_Device_DocmdResp(self, data):
        if hasattr(self, 'filter_Device_DocmdResp'):
            data = getattr(self, 'filter_Device_DocmdResp')(data)
        if data.error is None:
            raise TypeError('data.error == None')
        self.pack_Device_ErrorCode(data.error)
        if data.data_out is None:
            raise TypeError('data.data_out == None')
        self.pack_opaque(data.data_out)

    def pack_Device_SrqParms(self, data):
        if hasattr(self, 'filter_Device_SrqParms'):
            data = getattr(self, 'filter_Device_SrqParms')(data)
        if data.handle is None:
            raise TypeError('data.handle == None')
        self.pack_opaque(data.handle)

class VXI11Unpacker(xdrlib.Unpacker):
    def __init__(self, data, check_enum=True, check_array=True):
        xdrlib.Unpacker.__init__(self, data)
        self.check_enum = check_enum
        self.check_array = check_array

    unpack_int = xdrlib.Unpacker.unpack_int
    unpack_uint = xdrlib.Unpacker.unpack_uint
    unpack_unsigned = xdrlib.Unpacker.unpack_uint
    unpack_hyper = xdrlib.Unpacker.unpack_hyper
    unpack_uhyper = xdrlib.Unpacker.unpack_uhyper
    unpack_float = xdrlib.Unpacker.unpack_float
    unpack_double = xdrlib.Unpacker.unpack_double
    unpack_quadruple = xdrlib.Unpacker.unpack_double
    unpack_bool = xdrlib.Unpacker.unpack_bool
    unpack_opaque = xdrlib.Unpacker.unpack_opaque
    unpack_string = xdrlib.Unpacker.unpack_string
    unpack_Device_Link = unpack_int

    def unpack_Device_AddrFamily(self):
        data = self.unpack_int()
        if self.check_enum and data not in [const.DEVICE_TCP, const.DEVICE_UDP]:
            raise XDRError('value=%s not in enum Device_AddrFamily' % data)
        if hasattr(self, 'filter_Device_AddrFamily'):
            data = getattr(self, 'filter_Device_AddrFamily')(data)
        return data

    unpack_Device_Flags = unpack_int

    unpack_Device_ErrorCode = unpack_int

    def unpack_Device_Error(self):
        data = types.Device_Error()
        data.error = self.unpack_Device_ErrorCode()
        if hasattr(self, 'filter_Device_Error'):
            data = getattr(self, 'filter_Device_Error')(data)
        return data

    def unpack_Create_LinkParms(self):
        data = types.Create_LinkParms()
        data.clientId = self.unpack_int()
        data.lockDevice = self.unpack_bool()
        data.lock_timeout = self.unpack_uint()
        data.device = self.unpack_string()
        if hasattr(self, 'filter_Create_LinkParms'):
            data = getattr(self, 'filter_Create_LinkParms')(data)
        return data

    def unpack_Create_LinkResp(self):
        data = types.Create_LinkResp()
        data.error = self.unpack_Device_ErrorCode()
        data.lid = self.unpack_Device_Link()
        data.abortPort = self.unpack_uint()
        data.maxRecvSize = self.unpack_uint()
        if hasattr(self, 'filter_Create_LinkResp'):
            data = getattr(self, 'filter_Create_LinkResp')(data)
        return data

    def unpack_Device_WriteParms(self):
        data = types.Device_WriteParms()
        data.lid = self.unpack_Device_Link()
        data.io_timeout = self.unpack_uint()
        data.lock_timeout = self.unpack_uint()
        data.flags = self.unpack_Device_Flags()
        data.data = self.unpack_opaque()
        if hasattr(self, 'filter_Device_WriteParms'):
            data = getattr(self, 'filter_Device_WriteParms')(data)
        return data

    def unpack_Device_WriteResp(self):
        data = types.Device_WriteResp()
        data.error = self.unpack_Device_ErrorCode()
        data.size = self.unpack_uint()
        if hasattr(self, 'filter_Device_WriteResp'):
            data = getattr(self, 'filter_Device_WriteResp')(data)
        return data

    def unpack_Device_ReadParms(self):
        data = types.Device_ReadParms()
        data.lid = self.unpack_Device_Link()
        data.requestSize = self.unpack_uint()
        data.io_timeout = self.unpack_uint()
        data.lock_timeout = self.unpack_uint()
        data.flags = self.unpack_Device_Flags()
        data.termChar = self.unpack_uint()
        if hasattr(self, 'filter_Device_ReadParms'):
            data = getattr(self, 'filter_Device_ReadParms')(data)
        return data

    def unpack_Device_ReadResp(self):
        data = types.Device_ReadResp()
        data.error = self.unpack_Device_ErrorCode()
        data.reason = self.unpack_int()
        data.data = self.unpack_opaque()
        if hasattr(self, 'filter_Device_ReadResp'):
            data = getattr(self, 'filter_Device_ReadResp')(data)
        return data

    def unpack_Device_ReadStbResp(self):
        data = types.Device_ReadStbResp()
        data.error = self.unpack_Device_ErrorCode()
        data.stb = self.unpack_uint()
        if hasattr(self, 'filter_Device_ReadStbResp'):
            data = getattr(self, 'filter_Device_ReadStbResp')(data)
        return data

    def unpack_Device_GenericParms(self):
        data = types.Device_GenericParms()
        data.lid = self.unpack_Device_Link()
        data.flags = self.unpack_Device_Flags()
        data.lock_timeout = self.unpack_uint()
        data.io_timeout = self.unpack_uint()
        if hasattr(self, 'filter_Device_GenericParms'):
            data = getattr(self, 'filter_Device_GenericParms')(data)
        return data

    def unpack_Device_RemoteFunc(self):
        data = types.Device_RemoteFunc()
        data.hostAddr = self.unpack_uint()
        data.hostPort = self.unpack_uint()
        data.progNum = self.unpack_uint()
        data.progVers = self.unpack_uint()
        data.progFamily = self.unpack_Device_AddrFamily()
        if hasattr(self, 'filter_Device_RemoteFunc'):
            data = getattr(self, 'filter_Device_RemoteFunc')(data)
        return data

    def unpack_Device_EnableSrqParms(self):
        data = types.Device_EnableSrqParms()
        data.lid = self.unpack_Device_Link()
        data.enable = self.unpack_bool()
        data.handle = self.unpack_opaque()
        if len(data.handle) > 40 and self.check_array:
            raise XDRError('array length too long for data.handle')
        if hasattr(self, 'filter_Device_EnableSrqParms'):
            data = getattr(self, 'filter_Device_EnableSrqParms')(data)
        return data

    def unpack_Device_LockParms(self):
        data = types.Device_LockParms()
        data.lid = self.unpack_Device_Link()
        data.flags = self.unpack_Device_Flags()
        data.lock_timeout = self.unpack_uint()
        if hasattr(self, 'filter_Device_LockParms'):
            data = getattr(self, 'filter_Device_LockParms')(data)
        return data

    def unpack_Device_DocmdParms(self):
        data = types.Device_DocmdParms()
        data.lid = self.unpack_Device_Link()
        data.flags = self.unpack_Device_Flags()
        data.io_timeout = self.unpack_uint()
        data.lock_timeout = self.unpack_uint()
        data.cmd = self.unpack_int()
        data.network_order = self.unpack_bool()
        data.datasize = self.unpack_int()
        data.data_in = self.unpack_opaque()
        if hasattr(self, 'filter_Device_DocmdParms'):
            data = getattr(self, 'filter_Device_DocmdParms')(data)
        return data

    def unpack_Device_DocmdResp(self):
        data = types.Device_DocmdResp()
        data.error = self.unpack_Device_ErrorCode()
        data.data_out = self.unpack_opaque()
        if hasattr(self, 'filter_Device_DocmdResp'):
            data = getattr(self, 'filter_Device_DocmdResp')(data)
        return data

    def unpack_Device_SrqParms(self):
        data = types.Device_SrqParms()
        data.handle = self.unpack_opaque()
        if hasattr(self, 'filter_Device_SrqParms'):
            data = getattr(self, 'filter_Device_SrqParms')(data)
        return data


# Generated by rpcgen.py from vxi11.x on Fri Nov  1 00:49:56 2019
import sys,os
sys.path.append(os.path.dirname(__file__))
import vxi11_const as const
class Device_Error:
    # XDR definition:
    # struct Device_Error {
    #     Device_ErrorCode error;
    # };
    def __init__(self, error=None):
        self.error = error

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % repr(self.error)]
        return 'Device_Error(%s)' % ', '.join(out)
    __str__ = __repr__

class Create_LinkParms:
    # XDR definition:
    # struct Create_LinkParms {
    #     int clientId;
    #     bool lockDevice;
    #     uint lock_timeout;
    #     string device<>;
    # };
    def __init__(self, clientId=None, lockDevice=None, lock_timeout=None, device=None):
        self.clientId = clientId
        self.lockDevice = lockDevice
        self.lock_timeout = lock_timeout
        self.device = device

    def __repr__(self):
        out = []
        if self.clientId is not None:
            out += ['clientId=%s' % repr(self.clientId)]
        if self.lockDevice is not None:
            out += ['lockDevice=%s' % repr(self.lockDevice)]
        if self.lock_timeout is not None:
            out += ['lock_timeout=%s' % repr(self.lock_timeout)]
        if self.device is not None:
            out += ['device=%s' % repr(self.device)]
        return 'Create_LinkParms(%s)' % ', '.join(out)
    __str__ = __repr__

class Create_LinkResp:
    # XDR definition:
    # struct Create_LinkResp {
    #     Device_ErrorCode error;
    #     Device_Link lid;
    #     opaque abortPort[2];
    #     uint maxRecvSize;
    # };
    def __init__(self, error=None, lid=None, abortPort=None, maxRecvSize=None):
        self.error = error
        self.lid = lid
        self.abortPort = abortPort
        self.maxRecvSize = maxRecvSize

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % repr(self.error)]
        if self.lid is not None:
            out += ['lid=%s' % repr(self.lid)]
        if self.abortPort is not None:
            out += ['abortPort=%s' % repr(self.abortPort)]
        if self.maxRecvSize is not None:
            out += ['maxRecvSize=%s' % repr(self.maxRecvSize)]
        return 'Create_LinkResp(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_WriteParms:
    # XDR definition:
    # struct Device_WriteParms {
    #     Device_Link lid;
    #     uint io_timeout;
    #     uint lock_timeout;
    #     Device_Flags flags;
    #     opaque data<>;
    # };
    def __init__(self, lid=None, io_timeout=None, lock_timeout=None, flags=None, data=None):
        self.lid = lid
        self.io_timeout = io_timeout
        self.lock_timeout = lock_timeout
        self.flags = flags
        self.data = data

    def __repr__(self):
        out = []
        if self.lid is not None:
            out += ['lid=%s' % repr(self.lid)]
        if self.io_timeout is not None:
            out += ['io_timeout=%s' % repr(self.io_timeout)]
        if self.lock_timeout is not None:
            out += ['lock_timeout=%s' % repr(self.lock_timeout)]
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.data is not None:
            out += ['data=%s' % repr(self.data)]
        return 'Device_WriteParms(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_WriteResp:
    # XDR definition:
    # struct Device_WriteResp {
    #     Device_ErrorCode error;
    #     uint size;
    # };
    def __init__(self, error=None, size=None):
        self.error = error
        self.size = size

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % repr(self.error)]
        if self.size is not None:
            out += ['size=%s' % repr(self.size)]
        return 'Device_WriteResp(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_ReadParms:
    # XDR definition:
    # struct Device_ReadParms {
    #     Device_Link lid;
    #     uint requestSize;
    #     uint io_timeout;
    #     uint lock_timeout;
    #     Device_Flags flags;
    #     uint termChar;
    # };
    def __init__(self, lid=None, requestSize=None, io_timeout=None, lock_timeout=None, flags=None, termChar=None):
        self.lid = lid
        self.requestSize = requestSize
        self.io_timeout = io_timeout
        self.lock_timeout = lock_timeout
        self.flags = flags
        self.termChar = termChar

    def __repr__(self):
        out = []
        if self.lid is not None:
            out += ['lid=%s' % repr(self.lid)]
        if self.requestSize is not None:
            out += ['requestSize=%s' % repr(self.requestSize)]
        if self.io_timeout is not None:
            out += ['io_timeout=%s' % repr(self.io_timeout)]
        if self.lock_timeout is not None:
            out += ['lock_timeout=%s' % repr(self.lock_timeout)]
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.termChar is not None:
            out += ['termChar=%s' % repr(self.termChar)]
        return 'Device_ReadParms(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_ReadResp:
    # XDR definition:
    # struct Device_ReadResp {
    #     Device_ErrorCode error;
    #     int reason;
    #     opaque data<>;
    # };
    def __init__(self, error=None, reason=None, data=None):
        self.error = error
        self.reason = reason
        self.data = data

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % repr(self.error)]
        if self.reason is not None:
            out += ['reason=%s' % repr(self.reason)]
        if self.data is not None:
            out += ['data=%s' % repr(self.data)]
        return 'Device_ReadResp(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_ReadStbResp:
    # XDR definition:
    # struct Device_ReadStbResp {
    #     Device_ErrorCode error;
    #     uint stb;
    # };
    def __init__(self, error=None, stb=None):
        self.error = error
        self.stb = stb

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % repr(self.error)]
        if self.stb is not None:
            out += ['stb=%s' % repr(self.stb)]
        return 'Device_ReadStbResp(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_GenericParms:
    # XDR definition:
    # struct Device_GenericParms {
    #     Device_Link lid;
    #     Device_Flags flags;
    #     uint lock_timeout;
    #     uint io_timeout;
    # };
    def __init__(self, lid=None, flags=None, lock_timeout=None, io_timeout=None):
        self.lid = lid
        self.flags = flags
        self.lock_timeout = lock_timeout
        self.io_timeout = io_timeout

    def __repr__(self):
        out = []
        if self.lid is not None:
            out += ['lid=%s' % repr(self.lid)]
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.lock_timeout is not None:
            out += ['lock_timeout=%s' % repr(self.lock_timeout)]
        if self.io_timeout is not None:
            out += ['io_timeout=%s' % repr(self.io_timeout)]
        return 'Device_GenericParms(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_RemoteFunc:
    # XDR definition:
    # struct Device_RemoteFunc {
    #     uint hostAddr;
    #     opaque hostPort[2];
    #     uint progNum;
    #     uint progVers;
    #     Device_AddrFamily progFamily;
    # };
    def __init__(self, hostAddr=None, hostPort=None, progNum=None, progVers=None, progFamily=None):
        self.hostAddr = hostAddr
        self.hostPort = hostPort
        self.progNum = progNum
        self.progVers = progVers
        self.progFamily = progFamily

    def __repr__(self):
        out = []
        if self.hostAddr is not None:
            out += ['hostAddr=%s' % repr(self.hostAddr)]
        if self.hostPort is not None:
            out += ['hostPort=%s' % repr(self.hostPort)]
        if self.progNum is not None:
            out += ['progNum=%s' % repr(self.progNum)]
        if self.progVers is not None:
            out += ['progVers=%s' % repr(self.progVers)]
        if self.progFamily is not None:
            out += ['progFamily=%s' % const.Device_AddrFamily.get(self.progFamily, self.progFamily)]
        return 'Device_RemoteFunc(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_EnableSrqParms:
    # XDR definition:
    # struct Device_EnableSrqParms {
    #     Device_Link lid;
    #     bool enable;
    #     opaque handle<40>;
    # };
    def __init__(self, lid=None, enable=None, handle=None):
        self.lid = lid
        self.enable = enable
        self.handle = handle

    def __repr__(self):
        out = []
        if self.lid is not None:
            out += ['lid=%s' % repr(self.lid)]
        if self.enable is not None:
            out += ['enable=%s' % repr(self.enable)]
        if self.handle is not None:
            out += ['handle=%s' % repr(self.handle)]
        return 'Device_EnableSrqParms(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_LockParms:
    # XDR definition:
    # struct Device_LockParms {
    #     Device_Link lid;
    #     Device_Flags flags;
    #     uint lock_timeout;
    # };
    def __init__(self, lid=None, flags=None, lock_timeout=None):
        self.lid = lid
        self.flags = flags
        self.lock_timeout = lock_timeout

    def __repr__(self):
        out = []
        if self.lid is not None:
            out += ['lid=%s' % repr(self.lid)]
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.lock_timeout is not None:
            out += ['lock_timeout=%s' % repr(self.lock_timeout)]
        return 'Device_LockParms(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_DocmdParms:
    # XDR definition:
    # struct Device_DocmdParms {
    #     Device_Link lid;
    #     Device_Flags flags;
    #     uint io_timeout;
    #     uint lock_timeout;
    #     int cmd;
    #     bool network_order;
    #     int datasize;
    #     opaque data_in<>;
    # };
    def __init__(self, lid=None, flags=None, io_timeout=None, lock_timeout=None, cmd=None, network_order=None, datasize=None, data_in=None):
        self.lid = lid
        self.flags = flags
        self.io_timeout = io_timeout
        self.lock_timeout = lock_timeout
        self.cmd = cmd
        self.network_order = network_order
        self.datasize = datasize
        self.data_in = data_in

    def __repr__(self):
        out = []
        if self.lid is not None:
            out += ['lid=%s' % repr(self.lid)]
        if self.flags is not None:
            out += ['flags=%s' % repr(self.flags)]
        if self.io_timeout is not None:
            out += ['io_timeout=%s' % repr(self.io_timeout)]
        if self.lock_timeout is not None:
            out += ['lock_timeout=%s' % repr(self.lock_timeout)]
        if self.cmd is not None:
            out += ['cmd=%s' % repr(self.cmd)]
        if self.network_order is not None:
            out += ['network_order=%s' % repr(self.network_order)]
        if self.datasize is not None:
            out += ['datasize=%s' % repr(self.datasize)]
        if self.data_in is not None:
            out += ['data_in=%s' % repr(self.data_in)]
        return 'Device_DocmdParms(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_DocmdResp:
    # XDR definition:
    # struct Device_DocmdResp {
    #     Device_ErrorCode error;
    #     opaque data_out<>;
    # };
    def __init__(self, error=None, data_out=None):
        self.error = error
        self.data_out = data_out

    def __repr__(self):
        out = []
        if self.error is not None:
            out += ['error=%s' % repr(self.error)]
        if self.data_out is not None:
            out += ['data_out=%s' % repr(self.data_out)]
        return 'Device_DocmdResp(%s)' % ', '.join(out)
    __str__ = __repr__

class Device_SrqParms:
    # XDR definition:
    # struct Device_SrqParms {
    #     opaque handle<>;
    # };
    def __init__(self, handle=None):
        self.handle = handle

    def __repr__(self):
        out = []
        if self.handle is not None:
            out += ['handle=%s' % repr(self.handle)]
        return 'Device_SrqParms(%s)' % ', '.join(out)
    __str__ = __repr__

